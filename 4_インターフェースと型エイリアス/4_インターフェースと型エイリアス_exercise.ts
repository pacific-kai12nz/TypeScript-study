// 課題1: 基本的なインターフェース
// 以下の「商品」インターフェースを定義してください。
// プロパティ：id（数値）、名前（文字列）、価格（数値）、在庫あり（真偽値）

// ここにインターフェースを定義してください
interface 商品 {
  id: number;
  名前: string;
  価格: number;
  在庫あり: boolean;
}

// インターフェースを使用して商品オブジェクトを作成
const 商品A = {
  id: 1,
  名前: "コーヒー",
  価格: 350,
  在庫あり: true
};

// 商品配列の型付け
const 商品リスト = [
  商品A,
  {
    id: 2,
    名前: "紅茶",
    価格: 400,
    在庫あり: false
  }
];

// 課題2: オプショナルプロパティを持つインターフェース
// 以下の「従業員」インターフェースを定義してください。
// プロパティ：社員番号（数値）、名前（文字列）、部署（文字列、オプショナル）、役職（文字列、オプショナル）

// ここにインターフェースを定義してください
interface 従業員 {
  社員番号: number;
  名前: string;
  部署?: string;
  役職?: string;
}


// インターフェースを使用して従業員オブジェクトを作成
const 従業員A = {
  社員番号: 1001,
  名前: "山田太郎"
};

const 従業員B = {
  社員番号: 1002,
  名前: "佐藤花子",
  部署: "営業部",
  役職: "主任"
};

// 課題3: 読み取り専用プロパティを持つインターフェース
// 以下の「ユーザー」インターフェースを定義してください。
// プロパティ：id（数値、読み取り専用）、ユーザー名（文字列）、メールアドレス（文字列）、
// アクティブ（真偽値、デフォルトはtrue）

// ここにインターフェースを定義してください
interface ユーザー {
  readonly id: number;
  ユーザー名: string;
  メールアドレス: string;
  アクティブ: boolean;
}


// インターフェースを使用してユーザーオブジェクトを作成
const ユーザー1 = {
  id: 101,
  ユーザー名: "user1",
  メールアドレス: "user1@example.com",
  アクティブ: true
};

// 読み取り専用プロパティの変更を試みる（エラーになるはず）
// ユーザー1.id = 102;

// 課題4: メソッドを持つインターフェース
// 以下の「電卓」インターフェースを定義してください。
// プロパティ：値（数値）
// メソッド：加算(数値を受け取り戻り値なし)、減算(数値を受け取り戻り値なし)、現在値を取得(戻り値は数値)

// ここにインターフェースを定義してください
interface 電卓 {
  値: number;
  加算(数値: number): void;
  減算(数値: number): void;
  現在値を取得(): number;
}


// インターフェースを実装するオブジェクトを作成
const 計算機 = {
  値: 0,
  加算(数値) {
    this.値 += 数値;
  },
  減算(数値) {
    this.値 -= 数値;
  },
  現在値を取得() {
    return this.値;
  }
};

// 計算機を使用
計算機.加算(10);
計算機.減算(3);
console.log(計算機.現在値を取得());  // 7が表示されるはず

// 課題5: 型エイリアスの基本
// 以下のプリミティブ型のエイリアスを定義してください。
// - ユーザーID: 数値型のエイリアス
// - メールアドレス: 文字列型のエイリアス
// - アクティブ状態: 真偽値型のエイリアス

// ここに型エイリアスを定義してください
type ユーザーID = number;
type メールアドレス = string;
type アクティブ = boolean;


// 課題6: ユニオン型とリテラル型を使った型エイリアス
// 以下の型エイリアスを定義してください。
// - 数値または文字列: 数値型か文字列型のユニオン型
// - 役職名: "社員" | "主任" | "課長" | "部長" のリテラル型

// ここに型エイリアスを定義してください
type 数値または文字列 = number | string;
type 役職名 = "社員" | "主任" | "課長" | "部長";

// 型エイリアスを使用した関数
function 表示(値: 数値または文字列) {
  console.log(値);
}

function 役職表示(名前: string, 役職: 役職名) {
  console.log(`${名前}さんは${役職}です`);
}

// 使用例
表示(100);
表示("テスト");
// 表示(true);  // エラーになるはず

役職表示("田中", "主任");
// 役職表示("鈴木", "社長");  // エラーになるはず

// 課題7: インターフェースと型エイリアスの違いを体験
// 1. 以下の「動物」インターフェースを定義して、それを拡張した「犬」インターフェースを作成してください。
// 動物：名前（文字列）、年齢（数値）
// 犬：動物を拡張し、犬種（文字列）を追加

// ここにインターフェースを定義してください
interface 動物 {
  名前: string;
  年齢: number;
}

interface 犬インターフェース extends 動物 {
  犬種: string;
}

// 2. 同様の内容を型エイリアスで定義してください。交差型を使用します。

// ここに型エイリアスを定義してください
type 動物型 = {
  名前: string;
  年齢: number;
}

type 犬型 = 動物型 & {
  犬種: string;
};

// それぞれの方法で定義したインターフェースと型エイリアスを使用
const 柴犬: 犬インターフェース = {
  名前: "ポチ",
  年齢: 3,
  犬種: "柴犬"
};

const ラブラドール: 犬型 = {
  名前: "レオ",
  年齢: 5,
  犬種: "ラブラドール"
};

// 両方の実装がどのように動作するか確認
console.log(柴犬.名前, 柴犬.犬種);
console.log(ラブラドール.名前, ラブラドール.犬種);
